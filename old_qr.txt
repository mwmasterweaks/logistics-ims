 try {
            if ($request->end == null)
                $request->end = $request->from;

            $from = new Carbon($request->from);
            $to = new Carbon($request->to);
            $to = $to->addDay();

            $tbl = DeliveryReceipt::with("delivery_receipt_details");
            $tbl3 = DB::table('stocks')->whereBetween("created_at", [$from->toDateString(), $to->toDateString()])->get();


            if ($request->filterBy == 'deliverySum') {
                $tbl =  $tbl->with('sales_order.client');

                $tbl =  $tbl->whereBetween("delivery_receipts.updated_at", [$from, $to])
                    ->get();
            } else if ($request->filterBy == 'supplierSum') {

                $s_id = $request->supplierSelected;
                $tbl = PurchaseOrder::whereHas("supplier", function ($query) use ($s_id) {
                    $query->where("suppliers.id", $s_id);
                })
                    ->whereBetween('created_at', [$from, $to])
                    ->where("status", "!=", "draft")
                    ->get();

                return response()->json($tbl);
            }



            // return for delivery/item/client summary
            $data = [];
            $items = [];
            $purchase = [];
            $total_qty = 0;
            if ($request->filterBy == "deliverySum")
                foreach ($tbl as $item) {
                    $total_delivered_qty = 0;

                    $collect = collect();
                    $date = new Carbon($item->updated_at);
                    $sales_order = $item->sales_order;
                    $client = $sales_order->client;

                    $desc = "";
                    foreach ($item->delivery_receipt_details as $dr) {

                        $pivot = $dr->pivot;
                        $total_delivered_qty += $pivot->qty;
                        $desc = $dr->description;
                    }


                    $collect->put('date', $date->toFormattedDateString());
                    $collect->put('sales_order_id', $item->sales_order_id);
                    $collect->put('dr_id', $item->id);
                    $collect->put('name', $client->name);
                    $collect->put('memo', $item->memo);
                    $collect->put('class', $client->class);
                    $collect->put('desc', $desc);

                    $collect->put('qty', $total_delivered_qty);

                    $total_qty += $total_delivered_qty;

                    $collect->put('item', $item);
                    array_push($data, $collect);
                }
            elseif ($request->filterBy == "salesReturn") {


                $return = DB::table('item_sales_return')
                    ->whereBetween('date_return', [$from, $to])
                    ->get();

                // return $return;

                foreach ($return as $item) {
                    $collect = collect();
                    $collect->put('id', $item->item_id);
                    $collect->put('serial', $item->serial);
                    $collect->put('qty', $item->qty);
                    $collect->put('date', $item->date_return);
                    $collect->put('status', $item->status);
                    $total_qty += $item->qty;
                    array_push($data, $collect);
                }
                // return $data;
            } elseif ($request->filterBy == "items") {

                foreach ($tbl3 as $item) {
                    $total_qty_in = $item->qty_in;
                    $total_qty_out = $item->qty_out;
                    $qty = $total_qty_in - $total_qty_out;
                    $product = DB::table('items')->where('id', $item->item_id)->value('description');

                    $collect2 = collect();
                    $collect2->put('stock_id', $item->item_id);
                    $collect2->put('stock_desc', $product);
                    $collect2->put('stock_qty', $qty);
                    $collect2->put(
                        'item',
                        $item
                    );

                    array_push($items, $collect2);
                }
            } elseif ($request->filterBy == "purchaseSum") {
                if ($request->supplierSelected != null) {
                    $supplierSelected = $request->supplierSelected;
                    $tbl4 = PurchaseOrder::with('user', 'supplier')
                        ->where('supplier_id', $supplierSelected)
                        ->whereBetween('created_at', [$from, $to])->get();
                } else
                    $tbl4 = PurchaseOrder::with('user', 'supplier')->whereBetween('created_at', [$from, $to])->get();
            }
            foreach ($tbl4 as $item) {

                $retSup = $item->supplier;
                $supplier = $retSup->name;
                $retReq = $item->user;
                $req = $retReq->name;
                $date = new Carbon($item->created_at);


                $collect = collect();
                $collect->put('number', $item->id);
                $collect->put('supplier', $supplier);
                $collect->put('requestor', $req);
                $collect->put('total', number_format($item->total));
                $collect->put('date', $date->toFormattedDateString());
                $collect->put('status', $item->status);

                array_push($purchase, $collect);
            }



            $ret = collect();
            $ret->put("totalQty", $total_qty);
            $ret->put("data", $data);
            $ret->put("items", $items);
            $ret->put("purchase", $purchase);
            return response()->json($ret);
        }